#copy from notebook
import numpy as np
import astropy
astropy.__version__
url = 'http://jsoc.stanford.edu/data/aia/synoptic/2012/07/01/H0000/AIA20120701_0000_4500.fits'
#
from astropy.io import fits
def read_aia_synoptic_image(url): 
    '''
    Read SDO image from the input URL
    
    Parameters:
        url: str, URL of the image to read
        
    Returns:
        image - 2D array of floats
        img_header - FITS header of the image
    '''
    # open FITS file from input URL
    fimg = fits.open(url) 
    image = fimg[1].data # this will produce image as a numpy array
    img_header = fimg[1].header # FITS header contains detailed info about image, save it in case we will need
    fimg.close()
    
    return image, img_header
#
url = 'http://jsoc.stanford.edu/data/aia/synoptic/2012/07/01/H0000/AIA20120701_0000_4500.fits'
img1, img_header1 = read_aia_synoptic_image(url)
#
fimg = fits.open(url) 
image = fimg[1].data
ny, nx = len(img1), len(img1[0]) # number of rows and columns in image 
print('image size {:d} x {:d}'.format(nx, ny))
nxh = nx // 2 # center pixel column
nyh = ny // 2 # center pixel row
# same info from the header 
print('image size {:d} x {:d}'.format(img_header1['NAXIS1'], img_header1['NAXIS2']))
#
def set_sun_aperture(img, img_header, rsun_factor=1, minval=0.01):
    '''
    set all pixels outside rsun_factor*r_sun, where r_sun is Sun radius in image to minval
    
    This version uses loops to iterate through all image pixels
    '''
    # radius of the Sun in arcseconds
    r_sun = img_header["IMSCL_MP"] * img_header['R_SUN']
    # number of arcseconds per pixel in x and y directions
    dx_pix2sec, dy_pix2sec = img_header['CDELT1'], img_header['CDELT2']
    
    _img = np.copy(img)
    imin = _img.min()
    nrow, ncol = np.shape(_img)
    isum, nsum = 0, 0  
    nrh = nrow // 2
    nch = ncol // 2
    for i in range(nrow): 
        for j in range(ncol):
            rij = (((i-nch)*dx_pix2sec)**2 + ((j-nrh)*dy_pix2sec)**2)**0.5
            if rij > rsun_factor * r_sun:
                _img[i][j] = minval
                
    return _img
#def set_sun_aperture_np(img, img_header, rsun_factor=1, minval=0.01):
    '''
    set all pixels outside rsun_factor*r_sun, where r_sun is Sun radius in image to minval

    This version uses NumPy to process all image pixels without loops
    '''
    # radius of the Sun in arcseconds
    r_sun = img_header["IMSCL_MP"] * img_header['R_SUN']
    # number of arcseconds per pixel in x and y directions
    dx_pix2sec, dy_pix2sec = img_header['CDELT1'], img_header['CDELT2']
    
    _img = np.copy(img)
    imin = _img.min()
    nrow, ncol = np.shape(_img)
    isum, nsum = 0, 0  
    nrh = nrow // 2
    nch = ncol // 2
    Y, X = np.ogrid[:nrow, :ncol]
    rcenter = np.sqrt(((X - nch)*dx_pix2sec)**2 + ((Y - nrh)*dy_pix2sec)**2)
    rcut = rsun_factor * r_sun
    _img[rcenter > rcut] = minval        
    return _img

----------------------------------
import numpy as np
from astropy.io import fits

class AImage:
    def __init__(self, url, rsun_factor=1, minval=0.01):
        self.image, self.img_header = self.read_aia_synoptic_image(url)
        self.image = self.set_sun_aperture(self.image, self.img_header, rsun_factor, minval)

    def read_aia_synoptic_image(self, url): 

        with fits.open(url) as fimg:
            image = fimg[1].data
            img_header = fimg[1].header
        return image, img_header

    def set_sun_aperture(self, img, img_header, rsun_factor, minval):

      r_sun = img_header["IMSCL_MP"] * img_header['R_SUN']
      dx_pix2sec, dy_pix2sec = img_header['CDELT1'], img_header['CDELT2']
    
      _img = np.copy(img)
      imin = _img.min()
      nrow, ncol = np.shape(_img)
      isum, nsum = 0, 0  
      nrh = nrow // 2
      nch = ncol // 2
      Y, X = np.ogrid[:nrow, :ncol]
      rcenter = np.sqrt(((X - nch)*dx_pix2sec)**2 + ((Y - nrh)*dy_pix2sec)**2)
      rcut = rsun_factor * r_sun
      _img[rcenter > rcut] = minval        
      return _img

    def compute_median(self):
        return np.median(self.image)

    def compute_percentile(self, percentile):
        return np.percentile(self.image, percentile)
    def compute_mean(self)
        return np.mean(self.image)
# Example Usage
url = 'http://jsoc.stanford.edu/data/aia/synoptic/2012/07/01/H0000/AIA20120701_0000_4500.fits'
aimage = AImage(url, rsun_factor=1.5)
print(f"Median: {aimage.compute_median()}")
print(f"90th Percentile: {aimage.compute_percentile(90)}")
