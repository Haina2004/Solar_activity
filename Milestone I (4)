class TimeSeries:
    def __init__(self, start_date, end_date, cadence=2):
        self.start_date = start_date
        self.end_date = end_date
        self.cadence = cadence
   
    def process_images(self):
        #用AIA Synoptic data base
        pass

    def analyze_images(self):
        #用AImage
        pass
----------------------------------
import numpy as np
from astropy.io import fits

#这里需要现在他给的notebook里run一下 def read_aia_synptic_image 和def set_sun_aperture的code

class AImage:
    def __init__(self, url, rsun_factor=1, minval=0.01):
        self.image, self.img_header = self.read_aia_synoptic_image(url)
        self.image = self.set_sun_aperture(self.image, self.img_header, rsun_factor, minval)

    def read_aia_synoptic_image(self, url): 

        with fits.open(url) as fimg:
            image = fimg[1].data
            img_header = fimg[1].header
        return image, img_header

    def set_sun_aperture(self, img, img_header, rsun_factor, minval):

      r_sun = img_header["IMSCL_MP"] * img_header['R_SUN']
      dx_pix2sec, dy_pix2sec = img_header['CDELT1'], img_header['CDELT2']
    
      _img = np.copy(img)
      imin = _img.min()
      nrow, ncol = np.shape(_img)
      isum, nsum = 0, 0  
      nrh = nrow // 2
      nch = ncol // 2
      Y, X = np.ogrid[:nrow, :ncol]
      rcenter = np.sqrt(((X - nch)*dx_pix2sec)**2 + ((Y - nrh)*dy_pix2sec)**2)
      rcut = rsun_factor * r_sun
      _img[rcenter > rcut] = minval        
      return _img

    def compute_median(self):
        return np.median(self.image)

    def compute_percentile(self, percentile):
        return np.percentile(self.image, percentile)
    def compute_mean(self)
        return np.mean(self.image)
# Example Usage
url = 'http://jsoc.stanford.edu/data/aia/synoptic/2012/07/01/H0000/AIA20120701_0000_4500.fits'
aimage = AImage(url, rsun_factor=1.5)
print(f"Mean: {aimage.compute_mean()}")
print(f"Median: {aimage.compute_median()}")
print(f"90th Percentile: {aimage.compute_percentile(90)}")
——————————————————————————————
class AIATimeSeries:
    def __init__(self, start_date, end_date, time_cadence, wavelength, rsun_factor=1, minval=0.01):
        '''
        Initialize the AIATimeSeriesAnalyzer object.

        Parameters:
            start_date: str, starting date for the analysis in YYYY-MM-DD format.
            end_date: str, ending date for the analysis in YYYY-MM-DD format.
            time_cadence: int, number of days between each image.
            wavelength: str, wavelength filter for the images.
            rsun_factor: float, factor to multiply with Sun's radius for image cropping.
            minval: float, value to set for pixels outside the cropped area.
        '''
        self.start_date = start_date
        self.end_date = end_date
        self.time_cadence = time_cadence
        self.wavelength = wavelength
        self.rsun_factor = rsun_factor
        self.minval = minval
        self.images = []

    def fetch_images(self):
        image_urls = get_aia_image_urls(self.time_cadence, year=2023, filt='0335')
        for url in image_urls:
            aimage = AImage(url, self.rsun_factor, self.minval)
            self.images.append(aimage)

    def generate_statistics(self):
        for aimage in self.images:
            median = aimage.compute_median()
            percentile_90 = aimage.compute_percentile(90)
            mean = aimage.compute_mean()

    def visualize_data(self):
        '''
        Visualize the time series data.
        '''
        pass

    # Additional methods can be added here for more specific analysis or data handling.
